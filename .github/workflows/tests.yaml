name: Code checks and testing

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write   # allows pushing badge

jobs:
  check_and_test:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Attempt to pull testbed image for building speedup
        run: |
          docker pull ghcr.io/remimikalsen/python-testbed:v1 || echo "Cached image not found; will build a new one."

      - name: Build testbed docker image from cache
        run: |
          docker build \
            --cache-from ghcr.io/remimikalsen/python-testbed:v1 \
            -t ghcr.io/remimikalsen/python-testbed:v1 \
            -f tests-dockerized/Dockerfile.testbed .

      - name: Build test docker image
        run: |
          docker build -t sharepass-tests -f tests-dockerized/Dockerfile.tests .

      - name: Run linter
        run: |
          docker run --rm sharepass-tests lint

      - name: Run unit tests and capture badge output if changed
        id: run_tests
        run: |
          BADGE=$(docker run --rm sharepass-tests test-unit)
          if [ -n "$BADGE" ]; then
            echo "$BADGE" > tests/coverage-badge.svg
            echo "Badge updated."
            echo "badge_updated=true" >> $GITHUB_OUTPUT
          else
            echo "Badge unchanged."
            echo "badge_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Run E2E tests
        run: |
          docker run --rm sharepass-tests test-e2e

      - name: Commit updated coverage badge if changed
        if: steps.run_tests.outputs.badge_updated == 'true'
        run: |
          # Start SSH agent
          eval $(ssh-agent -s)
          ssh-add <(echo "$DEPLOY_KEY")
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          # Configure Git identity
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@sharepass"

          # Make sure we have enough history to do merges or pulls
          # (Fetch all commits so we can pull properly)
          git fetch --prune --unshallow || true
          git fetch origin +refs/heads/${{ github.event.pull_request.head.ref }}:refs/remotes/origin/${{ github.event.pull_request.head.ref }}

          # Create (or reset) a local branch to track the PR branch
          git checkout -B ${{ github.event.pull_request.head.ref }} origin/${{ github.event.pull_request.head.ref }}

          # Commit and push the updated badge
          git add tests/coverage-badge.svg
          git commit -m "ci: update coverage badge"
          git push origin ${{ github.event.pull_request.head.ref }}
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}